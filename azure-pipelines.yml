# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  outputFolder: './_output'
  artifactsFolder: './_artifacts'
  testsFolder: './_tests'
  majorVersion: '3.0.1'
  minorVersion: $[counter('minorVersion', 2000)]
  sonarrVersion: '$(majorVersion).$(minorVersion)'
  buildName: '$(Build.SourceBranchName).$(sonarrVersion)'
  sentryOrg: 'servarr'
  sentryUrl: 'https://sentry.servarr.com'
  dotnetVersion: '3.1.404'
  yarnCacheFolder: $(Pipeline.Workspace)/.yarn
  gitHubConnection: "github.com_danimart1991"

trigger:
  branches:
    include:
    - phantom-develop
    # - develop
    # - master

pr:
- phantom-develop
# - develop

stages:
  - stage: Setup
    displayName: Setup
    jobs:
    - job:
      displayName: Build Variables
      pool:
        vmImage: 'ubuntu-18.04'
      steps:
      # Set the build name properly.  The 'name' property won't recursively expand so hack here:
      - bash: echo "##vso[build.updatebuildnumber]$SONARRVERSION"
        displayName: Set Build Name
      - bash: |
          if [[ $BUILD_REASON == "PullRequest" ]]; then
          git diff origin/phantom-develop...HEAD  --name-only | grep -E "^(src/|azure-pipelines.yml)"
          echo $? > not_backend_update
          else
          echo 0 > not_backend_update
          fi
          cat not_backend_update
        displayName: Check for Backend File Changes
      - publish: not_backend_update
        artifact: not_backend_update
        displayName: Publish update type
  - stage: Build_Backend
    displayName: Build Backend
    dependsOn: Setup
    jobs:
    - job: Backend
      strategy:
        matrix:
          Linux:
            osName: 'Linux'
            imageName: 'ubuntu-18.04'
          # Mac:
          #   osName: 'Mac'
          #   imageName: 'macos-10.14'
          Windows:
            osName: 'Windows'
            imageName: 'windows-2019'

      pool:
        vmImage: $(imageName)
      variables:
        # Disable stylecop here - linting errors get caught by the analyze task
        EnableAnalyzers: 'false'
      steps:
      - checkout: self
        submodules: true
        fetchDepth: 1
      - task: UseDotNet@2
        displayName: 'Install .net core'
        inputs:
          version: $(dotnetVersion)
      - bash: ./build.sh --backend
        displayName: Build Sonarr Backend
      - bash: |
          find ${OUTPUTFOLDER} -type f ! -path "*/publish/*" -exec rm -rf {} \;
          find ${OUTPUTFOLDER} -depth -empty -type d -exec rm -r "{}" \;
        displayName: Clean up intermediate output
        condition: and(succeeded(), ne(variables['osName'], 'Windows'))
      - publish: $(outputFolder)
        artifact: '$(osName)Backend'
        displayName: Publish Backend
        condition: and(succeeded(), eq(variables['osName'], 'Windows'))
      # - publish: '$(testsFolder)/netcoreapp3.1/win-x64/publish'
      #   artifact: WindowsCoreTests
      #   displayName: Publish Windows Test Package
      #   condition: and(succeeded(), eq(variables['osName'], 'Windows'))
      # - publish: '$(testsFolder)/net462/linux-x64/publish'
      #   artifact: LinuxTests
      #   displayName: Publish Linux Mono Test Package
      #   condition: and(succeeded(), eq(variables['osName'], 'Windows'))
      # - publish: '$(testsFolder)/netcoreapp3.1/linux-x64/publish'
      #   artifact: LinuxCoreTests
      #   displayName: Publish Linux Test Package
      #   condition: and(succeeded(), eq(variables['osName'], 'Windows'))
      # - publish: '$(testsFolder)/netcoreapp3.1/linux-musl-x64/publish'
      #   artifact: LinuxMuslCoreTests
      #   displayName: Publish Linux Musl Test Package
      #   condition: and(succeeded(), eq(variables['osName'], 'Windows'))
      # - publish: '$(testsFolder)/netcoreapp3.1/osx-x64/publish'
      #   artifact: MacCoreTests
      #   displayName: Publish MacOS Test Package
      #   condition: and(succeeded(), eq(variables['osName'], 'Windows'))

  - stage: Build_Frontend
    displayName: Frontend
    dependsOn: Setup
    jobs:
    - job: Build
      strategy:
        matrix:
          Linux:
            osName: 'Linux'
            imageName: 'ubuntu-18.04'
          # Mac:
          #   osName: 'Mac'
          #   imageName: 'macos-10.14'
          Windows:
            osName: 'Windows'
            imageName: 'windows-2019'
      pool:
        vmImage: $(imageName)
      steps:
      - task: NodeTool@0
        displayName: Set Node.js version
        inputs:
          versionSpec: '10.x'
      - checkout: self
        submodules: true
        fetchDepth: 1
      - task: Cache@2
        inputs:
          key: 'yarn | "$(osName)" | yarn.lock'
          restoreKeys: |
             yarn | "$(osName)"
             yarn
          path: $(yarnCacheFolder)
        displayName: Cache Yarn packages
      - bash: ./build.sh --frontend
        displayName: Build Sonarr Frontend
        env:
          FORCE_COLOR: 0
          YARN_CACHE_FOLDER: $(yarnCacheFolder)
      - publish: $(outputFolder)
        artifact: '$(osName)Frontend'
        displayName: Publish Frontend
        condition: and(succeeded(), eq(variables['osName'], 'Windows'))
        
  # - stage: Installer
  #   dependsOn:
  #   - Build_Backend
  #   - Build_Frontend
  #   jobs:
  #   - job: Windows_Installer
  #     displayName: Create Installer
  #     pool:
  #       vmImage: 'windows-2019'
  #     steps:
  #     - checkout: self
  #       fetchDepth: 1
  #     - task: DownloadPipelineArtifact@2
  #       inputs:
  #         buildType: 'current'
  #         artifactName: WindowsBackend
  #         targetPath: _output
  #       displayName: Fetch Backend
  #     - task: DownloadPipelineArtifact@2
  #       inputs:
  #         buildType: 'current'
  #         artifactName: WindowsFrontend
  #         targetPath: _output
  #       displayName: Fetch Frontend
  #     - bash: ./build.sh --packages
  #       displayName: Create Packages
  #     - bash: |
  #         setup/inno/ISCC.exe setup/sonarr.iss //DFramework=netcoreapp3.1 //DRuntime=win-x86
  #         cp setup/output/Sonarr.*windows.netcoreapp3.1.exe ${BUILD_ARTIFACTSTAGINGDIRECTORY}/Sonarr.${BUILDNAME}.windows-core-x86-installer.exe
  #       displayName: Create .NET Core Windows installer
  #     - bash: |
  #         setup/inno/ISCC.exe setup/sonarr.iss //DFramework=netcoreapp3.1 //DRuntime=win-x64
  #         cp setup/output/Sonarr.*windows.netcoreapp3.1.exe ${BUILD_ARTIFACTSTAGINGDIRECTORY}/Sonarr.${BUILDNAME}.windows-core-x64-installer.exe
  #       displayName: Create .NET Core Windows installer
  #     - publish: $(Build.ArtifactStagingDirectory)
  #       artifact: 'WindowsInstaller'
  #       displayName: Publish Installer

  - stage: Packages
    dependsOn:
    - Build_Backend
    - Build_Frontend
    jobs:
    - job: Other_Packages
      displayName: Create Standard Packages
      pool:
        vmImage: 'ubuntu-18.04'
      steps:
      - checkout: self
        fetchDepth: 1
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: WindowsBackend
          targetPath: _output
        displayName: Fetch Backend
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: WindowsFrontend
          targetPath: _output
        displayName: Fetch Frontend
      - bash: ./build.sh --packages
        displayName: Create Packages
      - bash: |
          find . -name "Sonarr" -exec chmod a+x {} \;
          find . -name "Sonarr.Update" -exec chmod a+x {} \;
        displayName: Set executable bits
      - task: ArchiveFiles@2
        displayName: Create Windows zip
        inputs:
          archiveFile: '$(Build.ArtifactStagingDirectory)/Sonarr.$(buildName).windows.zip'
          archiveType: 'zip'
          includeRootFolder: false
          rootFolderOrFile: ./_output_windows
      # - task: ArchiveFiles@2
      #   displayName: Create Windows Core zip
      #   inputs:
      #     archiveFile: '$(Build.ArtifactStagingDirectory)/Sonarr.$(buildName).windows-core-x64.zip'
      #     archiveType: 'zip'
      #     includeRootFolder: false
      #     rootFolderOrFile: $(artifactsFolder)/win-x64/netcoreapp3.1
      # - task: ArchiveFiles@2
      #   displayName: Create Windows x86 Core zip
      #   inputs:
      #     archiveFile: '$(Build.ArtifactStagingDirectory)/Sonarr.$(buildName).windows-core-x86.zip'
      #     archiveType: 'zip'
      #     includeRootFolder: false
      #     rootFolderOrFile: $(artifactsFolder)/win-x86/netcoreapp3.1
      # - task: ArchiveFiles@2
      #   displayName: Create MacOS Core app
      #   inputs:
      #     archiveFile: '$(Build.ArtifactStagingDirectory)/Sonarr.$(buildName).osx-app-core-x64.zip'
      #     archiveType: 'zip'
      #     includeRootFolder: false
      #     rootFolderOrFile: $(artifactsFolder)/macos-app/netcoreapp3.1
      # - task: ArchiveFiles@2
      #   displayName: Create MacOS Core tar
      #   inputs:
      #     archiveFile: '$(Build.ArtifactStagingDirectory)/Sonarr.$(buildName).osx-core-x64.tar.gz'
      #     archiveType: 'tar'
      #     tarCompression: 'gz'
      #     includeRootFolder: false
      #     rootFolderOrFile: $(artifactsFolder)/macos/netcoreapp3.1
      - task: ArchiveFiles@2
        displayName: Create Linux Mono tar
        inputs:
          archiveFile: '$(Build.ArtifactStagingDirectory)/Sonarr.$(buildName).linux.tar.gz'
          archiveType: 'tar'
          tarCompression: 'gz'
          includeRootFolder: false
          # rootFolderOrFile: $(artifactsFolder)/linux-x64/net462
          rootFolderOrFile: ./_output_linux
      # - task: ArchiveFiles@2
      #   displayName: Create Linux Core tar
      #   inputs:
      #     archiveFile: '$(Build.ArtifactStagingDirectory)/Sonarr.$(buildName).linux-core-x64.tar.gz'
      #     archiveType: 'tar'
      #     tarCompression: 'gz'
      #     includeRootFolder: false
      #     rootFolderOrFile: $(artifactsFolder)/linux-x64/netcoreapp3.1
      # - task: ArchiveFiles@2
      #   displayName: Create Linux Musl Core tar
      #   inputs:
      #     archiveFile: '$(Build.ArtifactStagingDirectory)/Sonarr.$(buildName).linux-musl-core-x64.tar.gz'
      #     archiveType: 'tar'
      #     tarCompression: 'gz'
      #     includeRootFolder: false
      #     rootFolderOrFile: $(artifactsFolder)/linux-musl-x64/netcoreapp3.1
      # - task: ArchiveFiles@2
      #   displayName: Create ARM32 Linux Core tar
      #   inputs:
      #     archiveFile: '$(Build.ArtifactStagingDirectory)/Sonarr.$(buildName).linux-core-arm.tar.gz'
      #     archiveType: 'tar'
      #     tarCompression: 'gz'
      #     includeRootFolder: false
      #     rootFolderOrFile: $(artifactsFolder)/linux-arm/netcoreapp3.1
      # - task: ArchiveFiles@2
      #   displayName: Create ARM64 Linux Core tar
      #   inputs:
      #     archiveFile: '$(Build.ArtifactStagingDirectory)/Sonarr.$(buildName).linux-core-arm64.tar.gz'
      #     archiveType: 'tar'
      #     tarCompression: 'gz'
      #     includeRootFolder: false
      #     rootFolderOrFile: $(artifactsFolder)/linux-arm64/netcoreapp3.1
      # - task: ArchiveFiles@2
      #   displayName: Create ARM64 Linux Musl Core tar
      #   inputs:
      #     archiveFile: '$(Build.ArtifactStagingDirectory)/Sonarr.$(buildName).linux-musl-core-arm64.tar.gz'
      #     archiveType: 'tar'
      #     tarCompression: 'gz'
      #     includeRootFolder: false
      #     rootFolderOrFile: $(artifactsFolder)/linux-musl-arm64/netcoreapp3.1
      - task: GitHubRelease@1
        inputs:
          gitHubConnection: $(gitHubConnection)
          action: "create"
          target: "$(Build.SourceVersion)"
          tagSource: "userSpecifiedTag"
          tag: "$(buildName)"
          assets: "$(Build.ArtifactStagingDirectory)/*"
          isPreRelease: true
          addChangeLog: false
      - publish: $(Build.ArtifactStagingDirectory)
        artifact: 'Packages'
        displayName: Publish Packages